rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    match /messages/{matchId}/{msgId} {
      allow read, write: if request.auth != null && exists(/databases/$(database)/documents/matches/$(matchId)) && request.auth.uid in get(/databases/$(database)/documents/matches/$(matchId)).data.uids;
    }
    match /likes/{docId} {
      allow create: if request.auth != null && request.resource.data.fromUid == request.auth.uid;
      allow read: if request.auth != null && request.auth.uid in [resource.data.fromUid, resource.data.toUid];
    }
    match /matches/{matchId} {
      allow read: if request.auth != null && request.auth.uid in resource.data.uids;
      allow create: if false;
    }
    match /purchases/{docId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.uid;
      allow write: if false;
    }
    match /referrals/{docId} {
      allow read, write: if request.auth != null && (request.auth.uid == resource.data.inviterUid || request.auth.uid == resource.data.inviteeUid);
    }
    match /reports/{docId} {
      allow create: if request.auth != null;
      allow read: if false;
    }
    match /blocks/{docId} {
      allow create: if request.auth != null && request.resource.data.blockerUid == request.auth.uid;
      allow read: if request.auth != null && request.auth.uid == resource.data.blockerUid;
    }
  }
}
